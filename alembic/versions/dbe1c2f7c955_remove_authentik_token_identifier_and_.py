"""remove_authentik_token_identifier_and_token_description

Revision ID: dbe1c2f7c955
Revises: 4e0473c70895
Create Date: 2025-10-18 20:53:08.520049

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dbe1c2f7c955'
down_revision: Union[str, Sequence[str], None] = '4e0473c70895'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('job_chunks', 'keywords',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.drop_index(op.f('job_chunks_embedding_idx'), table_name='job_chunks', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_using='hnsw')
    op.drop_index(op.f('job_chunks_job_id_idx'), table_name='job_chunks')
    op.drop_constraint(op.f('uq_job_chunk_index'), 'job_chunks', type_='unique')
    op.drop_index(op.f('jobs_embedding_idx'), table_name='jobs', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_using='hnsw')
    op.create_foreign_key(None, 'jobs', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'users', 'roles', ['role_id'], ['id'])
    op.drop_column('users', 'authentik_token_identifier')
    op.drop_column('users', 'token_description')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('token_description', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('authentik_token_identifier', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'jobs', type_='foreignkey')
    op.create_index(op.f('jobs_embedding_idx'), 'jobs', ['embedding'], unique=False, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_using='hnsw')
    op.create_unique_constraint(op.f('uq_job_chunk_index'), 'job_chunks', ['job_id', 'chunk_index'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('job_chunks_job_id_idx'), 'job_chunks', ['job_id'], unique=False)
    op.create_index(op.f('job_chunks_embedding_idx'), 'job_chunks', ['embedding'], unique=False, postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_using='hnsw')
    op.alter_column('job_chunks', 'keywords',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    # ### end Alembic commands ###
